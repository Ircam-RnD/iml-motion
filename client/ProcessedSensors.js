'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _set=require('babel-runtime/core-js/set');var _set2=_interopRequireDefault(_set);var _classCallCheck2=require('babel-runtime/helpers/classCallCheck');var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _createClass2=require('babel-runtime/helpers/createClass');var _createClass3=_interopRequireDefault(_createClass2);var _client=require('waves-lfo/client');var lfo=_interopRequireWildcard(_client);var _lfoMotion=require('lfo-motion');var lfoMotion=_interopRequireWildcard(_lfoMotion);function _interopRequireWildcard(obj){if(obj&&obj.__esModule){return obj;}else{var newObj={};if(obj!=null){for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key))newObj[key]=obj[key];}}newObj.default=obj;return newObj;}}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}/**
 * High-level abstraction that listen for raw sensors (accelerometers and
 * gyroscopes) and apply a set of preprocessing / filtering on it.
 *
 * The output is composed of 11 values:
 * - IntensityNorm
 * - IntensityNormBoost
 * - BandPass AccX
 * - BandPass AccY
 * - BandPass AccZ
 * - Orientation X (processed from acc and gyro)
 * - Orientation Y (processed from acc and gyro)
 * - Orientation Z (processed from acc and gyro)
 * - gyro alpha (yaw) - degrees / ms
 * - gyro beta (pitch) - degrees / ms
 * - gyro gamma (roll) - degrees / ms
 *
 * @example
 * import { ProcessedSensors } from 'iml-motion';
 *
 * const processedSensors = new ProcessedSensors();
 * processedSensors.addListener(data => console.log(data));
 * processedSensors
 *  .init()
 *  .then(() => processedSensors.start());
 */var ProcessedSensors=function(){function ProcessedSensors(){var _ref=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},_ref$frameRate=_ref.frameRate,frameRate=_ref$frameRate===undefined?1/0.02:_ref$frameRate;(0,_classCallCheck3.default)(this,ProcessedSensors);this.frameRate=frameRate;this._emit=this._emit.bind(this);// create the lfo graph
this.motionInput=new lfoMotion.source.MotionInput();this.sampler=new lfoMotion.operator.Sampler({frameRate:frameRate});this.accSelect=new lfo.operator.Select({indexes:[0,1,2]});this.gyroSelect=new lfo.operator.Select({indexes:[3,4,5]});// intensity
this.intensity=new lfoMotion.operator.Intensity({feedback:0.7,gain:0.07});this.intensityNormSelect=new lfo.operator.Select({index:0});// boost
this.intensityClip=new lfo.operator.Clip({min:0,max:1});this.intensityPower=new lfo.operator.Power({exponent:0.25});this.powerClip=new lfo.operator.Clip({min:0.15,max:1});this.powerScale=new lfo.operator.Scale({inputMin:0.15,inputMax:1,outputMin:0,outputMax:1});// bandpass
this.normalizeAcc=new lfo.operator.Multiplier({factor:1/9.81});this.bandpass=new lfo.operator.Biquad({type:'bandpass',q:1,f0:5});this.bandpassGain=new lfo.operator.Multiplier({factor:1});// orientation filter
this.orientation=new lfoMotion.operator.Orientation();// gyroscopes scaling
this.gyroScale=new lfo.operator.Multiplier({factor:[1/1000,1/1000,1/1000]});// merge and output
this.merger=new lfo.operator.Merger({frameSizes:[1,1,3,3,3]});this.bridge=new lfo.sink.Bridge({processFrame:this._emit,finalizeStream:this._emit});this.motionInput.connect(this.sampler);// for intensity and bandpass
this.sampler.connect(this.accSelect);// intensity branch
this.accSelect.connect(this.intensity);this.intensity.connect(this.intensityNormSelect);this.intensityNormSelect.connect(this.merger);// boost branch
this.intensityNormSelect.connect(this.intensityClip);this.intensityClip.connect(this.intensityPower);this.intensityPower.connect(this.powerClip);this.powerClip.connect(this.powerScale);this.powerScale.connect(this.merger);// biquad branch
this.accSelect.connect(this.normalizeAcc);this.normalizeAcc.connect(this.bandpass);this.bandpass.connect(this.bandpassGain);this.bandpassGain.connect(this.merger);// orientation
this.sampler.connect(this.orientation);this.orientation.connect(this.merger);// gyroscpes
this.sampler.connect(this.gyroSelect);this.gyroSelect.connect(this.gyroScale);this.gyroScale.connect(this.merger);this.merger.connect(this.bridge);this._listeners=new _set2.default();}/**
   * Initialize the sensors
   * @return Promise
   */(0,_createClass3.default)(ProcessedSensors,[{key:'init',value:function init(){// do not override frameRate with values from motionInput as
// we resampler overrides the source sampleRate, cf. `constructor`
return this.motionInput.init();}/**
   * Start listening to the sensors
   */},{key:'start',value:function start(){this.motionInput.start();}/**
   * Stop listening to the sensors
   */},{key:'stop',value:function stop(){this.motionInput.stop();}/**
   * Add a listener to the module.
   *
   * @param {ProcessedSensorsListener} callback - Listener to register, the
   *  callback is executed with an array containing the processed data from
   *  the sensors
   */},{key:'addListener',value:function addListener(callback){this._listeners.add(callback);}/**
   * Remove a listener from the module.
   *
   * @param {ProcessedSensorsListener} callback - Listener to delete
   */},{key:'removeListener',value:function removeListener(callback){this._listeners.delete(callback);}/** @private */},{key:'_emit',value:function _emit(frame){this._listeners.forEach(function(listener){return listener(frame.data);});}}]);return ProcessedSensors;}();exports.default=ProcessedSensors;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,