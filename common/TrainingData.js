'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _classCallCheck2=require('babel-runtime/helpers/classCallCheck');var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _createClass2=require('babel-runtime/helpers/createClass');var _createClass3=_interopRequireDefault(_createClass2);var _rapidMixAdapters=require('rapid-mix-adapters');var _Example=require('./Example');var _Example2=_interopRequireDefault(_Example);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}// source : https://stackoverflow.com/questions/15251879/how-to-check-if-a-variable-is-a-typed-array-in-javascript
var isArray=function isArray(v){return v.constructor===Float32Array||v.constructor===Float64Array||Array.isArray(v);};/**
 * Manage and format a set of recorded examples, maintain a RapidMix compliant
 * training set.
 *
 * @param {Number} [inputDimension=null] - Input dimension
 *  (if `null`, is guessed from the first recorded element)
 * @param {Number} [outputDimension=null] - Output dimension.
 *  (if `null`, is guessed from the first recorded element).
 *
 * @example
 * import { ProcessedSensors, TrainingData } from 'iml-motion';
 *
 * const processedSensors = new ProcessedSensors();
 * const trainingData = new TrainingData(8);
 *
 * processedSensors.addListener(trainingData.addElement);
 * processedSensors.init()
 *   .then(() => processedSensors.start());
 */var TrainingData=function(){function TrainingData(){var inputDimension=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;var outputDimension=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var columnNames=arguments.length>2&&arguments[2]!==undefined?arguments[2]:[];(0,_classCallCheck3.default)(this,TrainingData);if(inputDimension!==null){this.fixedDimensions=true;this.inputDimension=inputDimension;this.outputDimension=outputDimension!==null?outputDimension:0;}else{this.fixedDimensions=false;}this.columnNames=columnNames;this._init();}/**
   * Add an example of length 1 containing the input element data to the training set.
   * Valid argument combinations are :
   * - (inputVector)
   * - (inputVector, outputVector)
   * - (label, inputVector)
   * - (label, inputVector, outputVector).
   * Meant to be a shortcut to avoid creating examples of length 1
   * when adding single elements as examples.
   *
   * @param {String} [label=rapidMixDefaultLabel] - The label of the new element.
   * @param {Array.Number|Float32Array|Float64Array} inputVector - The input part of the new element.
   * @param {Array.Number|Float32Array|Float64Array} [outputVector=null] - The output part of the new element.
   */(0,_createClass3.default)(TrainingData,[{key:'addElement',value:function addElement(){for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}args=args.length>3?args.slice(0,3):args;var label=_rapidMixAdapters.constants.rapidMixDefaultLabel;var inputVector=null;var outputVector=null;switch(args.length){case 0:throw new Error('addElement needs at least an array as argument');break;case 1:if(isArray(args[0]))inputVector=args[0];else throw new Error('single argument must be an array');break;case 2:if(typeof args[0]==='string'&&isArray(args[1])){label=args[0];inputVector=args[1];}else if(isArray(args[0])&&isArray(args[1])){inputVector=args[0];outputVector=args[1];}else{throw new Error('two arguments can only be either label and inputVector, or inputVector and outputVector');}break;case 3:if(typeof args[0]==='string'&&isArray(args[1])&&isArray(args[2])){label=args[0];inputVector=args[1];outputVector=args[2];}else{throw new Error('three arguments must be label, inputVector and outputVector');}break;}var e=new _Example2.default();e.setLabel(label);e.addElement(inputVector,outputVector);this.addExample(e.getExample());}/**
   * Add an example to the training set.
   *
   * @param {Object} example - A RapidMix formatted example.
   */},{key:'addExample',value:function addExample(example){var e=example.payload;this._checkDimensions(e.input[0],e.output[0]);if(e.input.length===0){throw new Error('examples must contain at least one input vector');}this.data.push({label:e.label,input:e.input,output:e.output});}/**
   * Add all examples from another training set.
   *
   * @param {Object} trainingSet - A RapidMix compliant training set.
   */},{key:'addTrainingSet',value:function addTrainingSet(trainingSet){var examples=trainingSet.payload.data;var e=examples[0];this._checkDimensions(e.input[0],e.output[0]);for(var i=0;i<examples.length;i++){e=examples[i];this.data.push({label:e.label,input:e.input,output:e.output});}}/**
   * Sets internal data from another training set.
   *
   * @param {Object} trainingSet - A RapidMix compliant training set.
   */},{key:'setTrainingSet',value:function setTrainingSet(trainingSet){if(!trainingSet){this._init();return;}var set=trainingSet.payload;this.inputDimension=set.inputDimension;this.outputDimension=set.outputDimension;this.data=set.data;this.columnNames=set.columnNames;}/**
   * Return the RapidMix compliant training set in JSON format.
   *
   * @return {Object} - Training set.
   */},{key:'getTrainingSet',value:function getTrainingSet(){return{docType:'rapid-mix:training-set',docVersion:_rapidMixAdapters.constants.rapidMixDocVersion,payload:{inputDimension:this.inputDimension,outputDimension:this.outputDimension,data:this.data}};}/**
   * Return an array of the current training set labels.
   *
   * @return {Array.String} - Training set sorted labels.
   */},{key:'getLabels',value:function getLabels(){var labels=[];for(var i=0;i<this.data.length;i++){var label=this.data[i].label;if(labels.indexOf(label)===-1)labels.push(label);}return labels.sort();}/**
   * Clear the whole training set.
   */},{key:'clear',value:function clear(){this._init();}/** @private */},{key:'_init',value:function _init(){if(!this.fixedDimensions){this.inputDimension=null;this.outputDimension=null;}this.data=[];}/**
   * Remove all examples of a certain label.
   *
   * @param {String} label - The label of the recordings to be removed.
   */},{key:'removeExamplesByLabel',value:function removeExamplesByLabel(label){this.data=this.data.filter(function(datum){return datum.label!==label;});}/**
   * Remove example at index.
   *
   * @param {Number} index - The index of the example to remove.
   */},{key:'removeExampleAtIndex',value:function removeExampleAtIndex(index){this.data.splice(index,1);}/**
   * Get the number of recordings.
   */},{key:'_checkDimensions',/** @private */value:function _checkDimensions(inputVector,outputVector){if(!isArray(inputVector)||outputVector&&!isArray(outputVector)){throw new Error('inputFrame and outputFrame must be arrays');}// set this back to true where appropriate if we add removeExample etc methods
if(!this.inputDimension||!this.outputDimension){this.inputDimension=inputVector.length;this.outputDimension=outputVector?outputVector.length:0;// this._empty = false;
}else if(inputVector.length!=this.inputDimension||outputVector.length!=this.outputDimension){throw new Error('dimensions mismatch');}}},{key:'length',get:function get(){return this.data.length;}}]);return TrainingData;}();exports.default=TrainingData;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,