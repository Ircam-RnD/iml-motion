'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _isInteger=require('babel-runtime/core-js/number/is-integer');var _isInteger2=_interopRequireDefault(_isInteger);var _keys=require('babel-runtime/core-js/object/keys');var _keys2=_interopRequireDefault(_keys);var _getIterator2=require('babel-runtime/core-js/get-iterator');var _getIterator3=_interopRequireDefault(_getIterator2);var _assign=require('babel-runtime/core-js/object/assign');var _assign2=_interopRequireDefault(_assign);var _from=require('babel-runtime/core-js/array/from');var _from2=_interopRequireDefault(_from);var _stringify=require('babel-runtime/core-js/json/stringify');var _stringify2=_interopRequireDefault(_stringify);var _promise=require('babel-runtime/core-js/promise');var _promise2=_interopRequireDefault(_promise);var _classCallCheck2=require('babel-runtime/helpers/classCallCheck');var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _createClass2=require('babel-runtime/helpers/createClass');var _createClass3=_interopRequireDefault(_createClass2);var _xmlhttprequest=require('xmlhttprequest');var _xmmClient=require('xmm-client');var Xmm=_interopRequireWildcard(_xmmClient);var _rapidMixAdapters=require('rapid-mix-adapters');var _rapidMixAdapters2=_interopRequireDefault(_rapidMixAdapters);function _interopRequireWildcard(obj){if(obj&&obj.__esModule){return obj;}else{var newObj={};if(obj!=null){for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key))newObj[key]=obj[key];}}newObj.default=obj;return newObj;}}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var isNode=new Function("try {return this===global;}catch(e){return false;}");var knownTargets={xmm:['gmm','gmr','hhmm','hhmr']};var defaultXmmConfig={modelType:'gmm',gaussians:1,absoluteRegularization:0.01,relativeRegularization:0.01,covarianceMode:'full',hierarchical:true,states:1,transitionMode:'leftright',regressionEstimator:'full',likelihoodWindow:10};/**
 * Representation of a gesture model. A instance of `XmmProcessor` can
 * train a model from examples and can perform classification and/or
 * regression depending on the chosen algorithm.
 *
 * The training is currently based on the presence of a remote server-side
 * API, that must be able to process rapidMix compliant JSON formats.
 *
 * @param {Object} options - Override default parameters
 * @param {String} [options.url='https://como.ircam.fr/api/v1/train'] - Url
 *  of the training end point.
 *
 * @example
 * import * as mano from 'mano-js/client';
 *
 * const processedSensors = new mano.ProcessedSensors();
 * const example = new mano.Example();
 * const trainingSet = new mano.TrainingSet();
 * const xmmProcessor = new mano.XmmProcesssor();
 *
 * example.setLabel('test');
 * processedSensors.addListener(example.addElement);
 *
 * // later
 * processedSensors.removeListener(example.addElement);
 * const rapidMixJsonExample = example.toJSON();
 *
 * trainingSet.addExample(rapidMixJsonExample);
 * const rapidMixJsonTrainingSet = trainingSet.toJSON();
 *
 * xmmProcessor
 *   .train(rapidMixJsonTrainingSet)
 *   .then(() => {
 *     // start decoding
 *     processedSensors.addListener(data => {
 *       const results = xmmProcessor.run(data);
 *       console.log(results);
 *     });
 *   });
 */var XmmProcessor=function(){function XmmProcessor(){var _ref=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},_ref$url=_ref.url,url=_ref$url===undefined?'https://como.ircam.fr/api/v1/train':_ref$url;(0,_classCallCheck3.default)(this,XmmProcessor);this.url=url;this._config={};this._decoder=null;this._model=null;this._modelType=null;this._likelihoodWindow=null;this.setConfig(defaultXmmConfig);this._setDecoder();}(0,_createClass3.default)(XmmProcessor,[{key:'_setDecoder',value:function _setDecoder(){switch(this._modelType){case'hhmm':this._decoder=new Xmm.HhmmDecoder(this._likelihoodWindow);break;case'gmm':default:this._decoder=new Xmm.GmmDecoder(this._likelihoodWindow);break;}}/**
   * Reset the model's temporal decoding state. Is only valid on `hhmm` decoder.
   */},{key:'reset',value:function reset(){if(this._decoder.reset)this._decoder.reset();}/**
   * Train the model according to the given `TrainingSet`. In this implmentation
   * the training is performed server-side and rely on an XHR call.
   *
   * @param {JSON} trainingSet - RapidMix compliant JSON formatted training set
   * @return {Promise} - Promise that resolves on the API response (RapidMix API
   *  response format), when the model is updated.
   */},{key:'train',value:function train(trainingSet){var _this=this;// REST request / response - RapidMix
return new _promise2.default(function(resolve,reject){var trainingData=_rapidMixAdapters2.default.createComoHttpRequest(_this.getConfig(),trainingSet);console.log(trainingData);var xhr=isNode()?new _xmlhttprequest.XMLHttpRequest():new XMLHttpRequest();xhr.open('post',_this.url,true);xhr.responseType='json';xhr.setRequestHeader('Access-Control-Allow-Origin','*');xhr.setRequestHeader('Content-Type','application/json');var errorMsg='an error occured while training the model. ';if(isNode()){// XMLHttpRequest module only supports xhr v1
xhr.onreadystatechange=function(){if(xhr.readyState===4){if(xhr.status===200){var body=JSON.parse(xhr.responseText);_this._model=body.payload.model;_this._decoder.setModel(_this._model.payload);resolve(body);}else{throw new Error(errorMsg+('response : '+xhr.status+' - '+xhr.responseText));}}};}else{// use xhr v2
xhr.onload=function(){if(xhr.status===200){var body=xhr.response;_this._model=body.payload.model;_this._decoder.setModel(_this._model.payload);resolve(body);}else{throw new Error(errorMsg+('response : '+xhr.status+' - '+xhr.response));}};xhr.onerror=function(){throw new Error(errorMsg+('response : '+xhr.status+' - '+xhr.response));};}xhr.send((0,_stringify2.default)(trainingData));});}/**
   * Perform the calssification or the regression of the given vector.
   *
   * @param {Float32Array|Array} vector - Input vector for the decoding.
   * @return {Object} results - Object containing the decoding results.
   */},{key:'run',value:function run(vector){if(vector instanceof Float32Array||vector instanceof Float64Array){vector=(0,_from2.default)(vector);}return this._decoder.filter(vector);}/**
   * RapidMix compliant configuration object.
   *
   * @return {Object} - RapidMix Configuration object.
   */},{key:'getConfig',value:function getConfig(){return _rapidMixAdapters2.default.xmmToRapidMixConfig((0,_assign2.default)({},this._config,{modelType:this._modelType}));// return {
//   docType: 'rapid-mix:ml-configuration',
//   docVersion: rapidMixAdapters.RAPID_MIX_DOC_VERSION,
//   target: {
//     name: `xmm:${this._modelType}`,
//     version: '1.0.0'
//   },
//   payload: this._config,
// };
}/**
   * Set the model configuration parameters (or a subset of them).
   *
   * @param {Object} config - RapidMix configuration object (or payload), or subset of parameters.
   */},{key:'setConfig',value:function setConfig(){var config=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};if(!config)return;// replace later by isValidRapidMixConfiguration (modelType shouldn't be allowed in payload)
if(config.docType==='rapid-mix:ml-configuration'&&config.docVersion&&config.payload&&config.target&&config.target.name&&config.target.name.split(':')[0]==='xmm'){var target=config.target.name.split(':');config=config.payload;if(target.length>1&&knownTargets.xmm.indexOf(target[1])>-1){if(this._modelType!==target[1]){this._modelType=target[1];this._setDecoder();}}}if(config.modelType&&knownTargets['xmm'].indexOf(config.modelType)>-1){var val=config.modelType;var newModel=val==='gmr'?'gmm':val==='hhmr'?'hhmm':val;if(newModel!==this._modelType){this._modelType=newModel;this._setDecoder();}}var _iteratorNormalCompletion=true;var _didIteratorError=false;var _iteratorError=undefined;try{for(var _iterator=(0,_getIterator3.default)((0,_keys2.default)(config)),_step;!(_iteratorNormalCompletion=(_step=_iterator.next()).done);_iteratorNormalCompletion=true){var key=_step.value;var _val=config[key];if(key==='gaussians'&&(0,_isInteger2.default)(_val)&&_val>0||key==='absoluteRegularization'&&typeof _val==='number'&&_val>0||key==='relativeRegularization'&&typeof _val==='number'&&_val>0||key==='covarianceMode'&&typeof _val==='string'&&['full','diagonal'].indexOf(_val)>-1||key==='hierarchical'&&typeof _val==='boolean'||key==='states'&&(0,_isInteger2.default)(_val)&&_val>0||key==='transitionMode'&&typeof _val==='string'&&['leftright','ergodic'].indexOf(_val)>-1||key==='regressionEstimator'&&typeof _val==='string'&&['full','windowed','likeliest'].indexOf(_val)>-1){this._config[key]=_val;}else if(key==='likelihoodWindow'&&(0,_isInteger2.default)(_val)&&_val>0){this._likelihoodWindow=_val;if(this._decoder!==null){this._decoder.setLikelihoodWindow(this._likelihoodWindow);}}}}catch(err){_didIteratorError=true;_iteratorError=err;}finally{try{if(!_iteratorNormalCompletion&&_iterator.return){_iterator.return();}}finally{if(_didIteratorError){throw _iteratorError;}}}}/**
   * Retrieve the model in RapidMix model format.
   *
   * @return {Object} - Current RapidMix Model object.
   */},{key:'getModel',value:function getModel(){return this._model;}/**
   * Use the given RapidMix model object for the decoding.
   *
   * @param {Object} model - RapidMix Model object.
   */},{key:'setModel',value:function setModel(model){if(!model){this.model=null;this._decoder.setModel(null);return;}var targets=model.target.name.split(':');var lib=targets[0];var algo=targets[1];if(lib==='xmm'){this._modelType=algo==='hhmm'?algo:'gmm';this._setDecoder();this._model=model;// this._decoder.setModel(model.payload);
this._decoder.setModel(_rapidMixAdapters2.default.rapidMixToXmmModel(model));}else{throw new Error('Invalid type '+lib);}}}]);return XmmProcessor;}();exports.default=XmmProcessor;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,