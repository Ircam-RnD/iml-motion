'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _isInteger=require('babel-runtime/core-js/number/is-integer');var _isInteger2=_interopRequireDefault(_isInteger);var _keys=require('babel-runtime/core-js/object/keys');var _keys2=_interopRequireDefault(_keys);var _getIterator2=require('babel-runtime/core-js/get-iterator');var _getIterator3=_interopRequireDefault(_getIterator2);var _from=require('babel-runtime/core-js/array/from');var _from2=_interopRequireDefault(_from);var _stringify=require('babel-runtime/core-js/json/stringify');var _stringify2=_interopRequireDefault(_stringify);var _promise=require('babel-runtime/core-js/promise');var _promise2=_interopRequireDefault(_promise);var _classCallCheck2=require('babel-runtime/helpers/classCallCheck');var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _createClass2=require('babel-runtime/helpers/createClass');var _createClass3=_interopRequireDefault(_createClass2);var _xmlhttprequest=require('xmlhttprequest');var _xmmClient=require('xmm-client');var Xmm=_interopRequireWildcard(_xmmClient);var _rapidMixAdapters=require('rapid-mix-adapters');var _rapidMixAdapters2=_interopRequireDefault(_rapidMixAdapters);function _interopRequireWildcard(obj){if(obj&&obj.__esModule){return obj;}else{var newObj={};if(obj!=null){for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key))newObj[key]=obj[key];}}newObj.default=obj;return newObj;}}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var isNode=new Function("try {return this===global;}catch(e){return false;}");var knownTargets={xmm:['gmm','gmr','hhmm','hhmr']};var defaultXmmConfig={modelType:'gmm',gaussians:1,absoluteRegularization:0.01,relativeRegularization:0.01,covarianceMode:'full',hierarchical:true,states:1,transitionMode:'leftright',regressionEstimator:'full',likelihoodWindow:10};/**
 * Representation of a gesture model. A instance of `XmmProcessor` can
 * train a model from examples and can perform classification and/or
 * regression depending on the chosen algorithm.
 *
 * The training is currently based on the presence of a remote server-side
 * API, that must be able to process rapidMix compliant JSON formats.
 *
 * @param {Object} options - Override default parameters
 * @param {String} [options.url='https://como.ircam.fr/api/v1/train'] - Url
 *  of the training end point.
 *
 * @example
 * import * as mano from 'mano-js/client';
 *
 * const processedSensors = new mano.ProcessedSensors();
 * const example = new mano.Example();
 * const trainingSet = new mano.TrainingSet();
 * const xmmProcessor = new mano.XmmProcesssor();
 *
 * example.setLabel('test');
 * processedSensors.addListener(example.addElement);
 *
 * // later
 * processedSensors.removeListener(example.addElement);
 * const rapidMixJsonExample = example.toJSON();
 *
 * trainingSet.addExample(rapidMixJsonExample);
 * const rapidMixJsonTrainingSet = trainingSet.toJSON();
 *
 * xmmProcessor
 *   .train(rapidMixJsonTrainingSet)
 *   .then(() => {
 *     // start decoding
 *     processedSensors.addListener(data => {
 *       const results = xmmProcessor.run(data);
 *       console.log(results);
 *     });
 *   });
 */var XmmProcessor=function(){function XmmProcessor(){var _ref=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},_ref$url=_ref.url,url=_ref$url===undefined?'https://como.ircam.fr/api/v1/train':_ref$url;(0,_classCallCheck3.default)(this,XmmProcessor);this.url=url;this._config={};this._decoder=null;this._model=null;this._modelType=null;this._likelihoodWindow=null;this.setConfig(defaultXmmConfig);this._setDecoder();}(0,_createClass3.default)(XmmProcessor,[{key:'_setDecoder',value:function _setDecoder(){switch(this._modelType){case'hhmm':this._decoder=new Xmm.HhmmDecoder(this._likelihoodWindow);break;case'gmm':default:this._decoder=new Xmm.GmmDecoder(this._likelihoodWindow);break;}}/**
   * Reset the model's temporal decoding state. Is only valid on `hhmm` decoder.
   */},{key:'reset',value:function reset(){if(this._decoder.reset)this._decoder.reset();}/**
   * Train the model according to the given `TrainingSet`. In this implmentation
   * the training is performed server-side and rely on an XHR call.
   *
   * @param {JSON} trainingSet - RapidMix compliant JSON formatted training set
   * @return {Promise} - Promise that resolves on the API response (RapidMix API
   *  response format), when the model is updated.
   */},{key:'train',value:function train(trainingSet){var _this=this;// REST request / response - RapidMix
return new _promise2.default(function(resolve,reject){var trainingData={docType:'rapid-mix:ml:http-request',docVersion:_rapidMixAdapters2.default.RAPID_MIX_DOC_VERSION,configuration:_this.getConfig(),trainingSet:trainingSet};var xhr=isNode()?new _xmlhttprequest.XMLHttpRequest():new XMLHttpRequest();xhr.open('post',_this.url,true);xhr.responseType='json';xhr.setRequestHeader('Access-Control-Allow-Origin','*');xhr.setRequestHeader('Content-Type','application/json');var errorMsg='an error occured while training the model. ';if(isNode()){// XMLHttpRequest module only supports xhr v1
xhr.onreadystatechange=function(){if(xhr.readyState===4){if(xhr.status===200){var body=JSON.parse(xhr.responseText);_this._decoder.setModel(body.model.payload);_this._model=body.model;resolve(body);}else{throw new Error(errorMsg+('response : '+xhr.status+' - '+xhr.responseText));}}};}else{// use xhr v2
xhr.onload=function(){if(xhr.status===200){var body=xhr.response;_this._decoder.setModel(body.model.payload);_this._model=body.model;resolve(body);}else{throw new Error(errorMsg+('response : '+xhr.status+' - '+xhr.response));}};xhr.onerror=function(){throw new Error(errorMsg+('response : '+xhr.status+' - '+xhr.response));};}xhr.send((0,_stringify2.default)(trainingData));});}/**
   * Perform the calssification or the regression of the given vector.
   *
   * @param {Float32Array|Array} vector - Input vector for the decoding.
   * @return {Object} results - Object containing the decoding results.
   */},{key:'run',value:function run(vector){if(vector instanceof Float32Array||vector instanceof Float64Array){vector=(0,_from2.default)(vector);}return this._decoder.filter(vector);}/**
   * RapidMix compliant configuration object.
   *
   * @return {Object} - RapidMix Configuration object.
   */},{key:'getConfig',value:function getConfig(){return{docType:'rapid-mix:ml:configuration',docVersion:_rapidMixAdapters2.default.RAPID_MIX_DOC_VERSION,target:{name:'xmm:'+this._modelType,version:'1.0.0'},payload:this._config};}/**
   * Set the model configuration parameters (or a subset of them).
   *
   * @param {Object} config - RapidMix configuration object (or payload), or subset of parameters.
   */},{key:'setConfig',value:function setConfig(){var config=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};if(!config)return;// replace later by isValidRapidMixConfiguration (modelType shouldn't be allowed in payload)
if(config.docType==='rapid-mix:ml:configuration'&&config.docVersion&&config.payload&&config.target&&config.target.name&&config.target.name.split(':')[0]==='xmm'){var target=config.target.name.split(':');config=config.payload;if(target.length>1&&knownTargets.xmm.indexOf(target[1])>-1){if(this._modelType!==target[1]){this._modelType=target[1];this._setDecoder();}}}if(config.modelType&&knownTargets['xmm'].indexOf(config.modelType)>-1){var val=config.modelType;var newModel=val==='gmr'?'gmm':val==='hhmr'?'hhmm':val;if(newModel!==this._modelType){this._modelType=newModel;this._setDecoder();}}var _iteratorNormalCompletion=true;var _didIteratorError=false;var _iteratorError=undefined;try{for(var _iterator=(0,_getIterator3.default)((0,_keys2.default)(config)),_step;!(_iteratorNormalCompletion=(_step=_iterator.next()).done);_iteratorNormalCompletion=true){var key=_step.value;var _val=config[key];if(key==='gaussians'&&(0,_isInteger2.default)(_val)&&_val>0||key==='absoluteRegularization'&&typeof _val==='number'&&_val>0||key==='relativeRegularization'&&typeof _val==='number'&&_val>0||key==='covarianceMode'&&typeof _val==='string'&&['full','diagonal'].indexOf(_val)>-1||key==='hierarchical'&&typeof _val==='boolean'||key==='states'&&(0,_isInteger2.default)(_val)&&_val>0||key==='transitionMode'&&typeof _val==='string'&&['leftright','ergodic'].indexOf(_val)>-1||key==='regressionEstimator'&&typeof _val==='string'&&['full','windowed','likeliest'].indexOf(_val)>-1){this._config[key]=_val;}else if(key==='likelihoodWindow'&&(0,_isInteger2.default)(_val)&&_val>0){this._likelihoodWindow=_val;if(this._decoder!==null){this._decoder.setLikelihoodWindow(this._likelihoodWindow);}}}}catch(err){_didIteratorError=true;_iteratorError=err;}finally{try{if(!_iteratorNormalCompletion&&_iterator.return){_iterator.return();}}finally{if(_didIteratorError){throw _iteratorError;}}}}/**
   * Retrieve the model in RapidMix model format.
   *
   * @return {Object} - Current RapidMix Model object.
   */},{key:'getModel',value:function getModel(){return this._model;}/**
   * Use the given RapidMix model object for the decoding.
   *
   * @param {Object} model - RapidMix Model object.
   */},{key:'setModel',value:function setModel(model){if(!model){this.model=null;this._decoder.setModel(null);return;}var targets=model.target.name.split(':');var lib=targets[0];var algo=targets[1];if(lib==='xmm'){this._modelType=algo==='hhmm'?algo:'gmm';this._setDecoder();this._model=model;this._decoder.setModel(model.payload);}else{throw new Error('Invalid type '+lib);}}}]);return XmmProcessor;}();exports.default=XmmProcessor;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbIlhtbSIsImlzTm9kZSIsIkZ1bmN0aW9uIiwia25vd25UYXJnZXRzIiwieG1tIiwiZGVmYXVsdFhtbUNvbmZpZyIsIm1vZGVsVHlwZSIsImdhdXNzaWFucyIsImFic29sdXRlUmVndWxhcml6YXRpb24iLCJyZWxhdGl2ZVJlZ3VsYXJpemF0aW9uIiwiY292YXJpYW5jZU1vZGUiLCJoaWVyYXJjaGljYWwiLCJzdGF0ZXMiLCJ0cmFuc2l0aW9uTW9kZSIsInJlZ3Jlc3Npb25Fc3RpbWF0b3IiLCJsaWtlbGlob29kV2luZG93IiwiWG1tUHJvY2Vzc29yIiwidXJsIiwiX2NvbmZpZyIsIl9kZWNvZGVyIiwiX21vZGVsIiwiX21vZGVsVHlwZSIsIl9saWtlbGlob29kV2luZG93Iiwic2V0Q29uZmlnIiwiX3NldERlY29kZXIiLCJIaG1tRGVjb2RlciIsIkdtbURlY29kZXIiLCJyZXNldCIsInRyYWluaW5nU2V0IiwicmVzb2x2ZSIsInJlamVjdCIsInRyYWluaW5nRGF0YSIsImRvY1R5cGUiLCJkb2NWZXJzaW9uIiwiUkFQSURfTUlYX0RPQ19WRVJTSU9OIiwiY29uZmlndXJhdGlvbiIsImdldENvbmZpZyIsInhociIsIlhNTEh0dHBSZXF1ZXN0Iiwib3BlbiIsInJlc3BvbnNlVHlwZSIsInNldFJlcXVlc3RIZWFkZXIiLCJlcnJvck1zZyIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiLCJzdGF0dXMiLCJib2R5IiwiSlNPTiIsInBhcnNlIiwicmVzcG9uc2VUZXh0Iiwic2V0TW9kZWwiLCJtb2RlbCIsInBheWxvYWQiLCJFcnJvciIsIm9ubG9hZCIsInJlc3BvbnNlIiwib25lcnJvciIsInNlbmQiLCJ2ZWN0b3IiLCJGbG9hdDMyQXJyYXkiLCJGbG9hdDY0QXJyYXkiLCJmaWx0ZXIiLCJ0YXJnZXQiLCJuYW1lIiwidmVyc2lvbiIsImNvbmZpZyIsInNwbGl0IiwibGVuZ3RoIiwiaW5kZXhPZiIsInZhbCIsIm5ld01vZGVsIiwia2V5Iiwic2V0TGlrZWxpaG9vZFdpbmRvdyIsInRhcmdldHMiLCJsaWIiLCJhbGdvIl0sIm1hcHBpbmdzIjoibThCQUFBLDhDQUNBLHFDLEdBQVlBLEkscUNBQ1osb0QsOFhBRUEsR0FBTUMsUUFBUyxHQUFJQyxTQUFKLENBQWEsb0RBQWIsQ0FBZixDQUVBLEdBQU1DLGNBQWUsQ0FDbkJDLElBQUssQ0FBRSxLQUFGLENBQVMsS0FBVCxDQUFnQixNQUFoQixDQUF3QixNQUF4QixDQURjLENBQXJCLENBSUEsR0FBTUMsa0JBQW1CLENBQ3ZCQyxVQUFXLEtBRFksQ0FFdkJDLFVBQVcsQ0FGWSxDQUd2QkMsdUJBQXdCLElBSEQsQ0FJdkJDLHVCQUF3QixJQUpELENBS3ZCQyxlQUFnQixNQUxPLENBTXZCQyxhQUFjLElBTlMsQ0FPdkJDLE9BQVEsQ0FQZSxDQVF2QkMsZUFBZ0IsV0FSTyxDQVN2QkMsb0JBQXFCLE1BVEUsQ0FVdkJDLGlCQUFrQixFQVZLLENBQXpCLENBYUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztNQXdDTUMsYSxZQUNKLHVCQUVRLG9FQUFKLEVBQUksZUFETkMsR0FDTSxDQUROQSxHQUNNLHNCQURBLG9DQUNBLDBEQUNOLEtBQUtBLEdBQUwsQ0FBV0EsR0FBWCxDQUVBLEtBQUtDLE9BQUwsQ0FBZSxFQUFmLENBQ0EsS0FBS0MsUUFBTCxDQUFnQixJQUFoQixDQUNBLEtBQUtDLE1BQUwsQ0FBYyxJQUFkLENBQ0EsS0FBS0MsVUFBTCxDQUFrQixJQUFsQixDQUNBLEtBQUtDLGlCQUFMLENBQXlCLElBQXpCLENBRUEsS0FBS0MsU0FBTCxDQUFlbEIsZ0JBQWYsRUFDQSxLQUFLbUIsV0FBTCxHQUNELEMsdUZBRWEsQ0FDWixPQUFRLEtBQUtILFVBQWIsRUFDRSxJQUFLLE1BQUwsQ0FDRSxLQUFLRixRQUFMLENBQWdCLEdBQUluQixLQUFJeUIsV0FBUixDQUFvQixLQUFLSCxpQkFBekIsQ0FBaEIsQ0FDQSxNQUNGLElBQUssS0FBTCxDQUNBLFFBQ0Us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OEIsd0JBQWlCRixJQUFqQixDQUE5QixFQUF1REEsS0FBTSxDQUFqRSxDQUFvRSxDQUN6RSxLQUFLL0MsaUJBQUwsQ0FBeUIrQyxJQUF6QixDQUVBLEdBQUksS0FBS2xELFFBQUwsR0FBa0IsSUFBdEIsQ0FBNEIsQ0FDMUIsS0FBS0EsUUFBTCxDQUFjcUQsbUJBQWQsQ0FBa0MsS0FBS2xELGlCQUF2QyxFQUNELENBQ0YsQ0FDRixDQWxEb0IsK0xBbUR0QixDQUVEOzs7O2dEQUtXLENBQ1QsTUFBTyxNQUFLRixNQUFaLENBQ0QsQ0FFRDs7OzsrQ0FLUytCLEssQ0FBTyxDQUNkLEdBQUksQ0FBQ0EsS0FBTCxDQUFZLENBQ1YsS0FBS0EsS0FBTCxDQUFhLElBQWIsQ0FDQSxLQUFLaEMsUUFBTCxDQUFjK0IsUUFBZCxDQUF1QixJQUF2QixFQUNBLE9BQ0QsQ0FFRCxHQUFNdUIsU0FBVXRCLE1BQU1XLE1BQU4sQ0FBYUMsSUFBYixDQUFrQkcsS0FBbEIsQ0FBd0IsR0FBeEIsQ0FBaEIsQ0FDQSxHQUFNUSxLQUFNRCxRQUFRLENBQVIsQ0FBWixDQUNBLEdBQU1FLE1BQU9GLFFBQVEsQ0FBUixDQUFiLENBRUEsR0FBSUMsTUFBUSxLQUFaLENBQW1CLENBQ2pCLEtBQUtyRCxVQUFMLENBQWtCc0QsT0FBUyxNQUFULENBQWtCQSxJQUFsQixDQUF5QixLQUEzQyxDQUVBLEtBQUtuRCxXQUFMLEdBQ0EsS0FBS0osTUFBTCxDQUFjK0IsS0FBZCxDQUNBLEtBQUtoQyxRQUFMLENBQWMrQixRQUFkLENBQXVCQyxNQUFNQyxPQUE3QixFQUNELENBTkQsSUFNTyxDQUNMLEtBQU0sSUFBSUMsTUFBSixpQkFBMEJxQixHQUExQixDQUFOLENBQ0QsQ0FDRixDLDRDQUdZMUQsWSIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFhNTEh0dHBSZXF1ZXN0IGFzIFhIUiB9IGZyb20gJ3htbGh0dHByZXF1ZXN0JztcbmltcG9ydCAqIGFzIFhtbSBmcm9tICd4bW0tY2xpZW50JztcbmltcG9ydCByYXBpZE1peEFkYXB0ZXJzIGZyb20gJ3JhcGlkLW1peC1hZGFwdGVycyc7XG5cbmNvbnN0IGlzTm9kZSA9IG5ldyBGdW5jdGlvbihcInRyeSB7cmV0dXJuIHRoaXM9PT1nbG9iYWw7fWNhdGNoKGUpe3JldHVybiBmYWxzZTt9XCIpO1xuXG5jb25zdCBrbm93blRhcmdldHMgPSB7XG4gIHhtbTogWyAnZ21tJywgJ2dtcicsICdoaG1tJywgJ2hobXInIF1cbn07XG5cbmNvbnN0IGRlZmF1bHRYbW1Db25maWcgPSB7XG4gIG1vZGVsVHlwZTogJ2dtbScsXG4gIGdhdXNzaWFuczogMSxcbiAgYWJzb2x1dGVSZWd1bGFyaXphdGlvbjogMC4wMSxcbiAgcmVsYXRpdmVSZWd1bGFyaXphdGlvbjogMC4wMSxcbiAgY292YXJpYW5jZU1vZGU6ICdmdWxsJyxcbiAgaGllcmFyY2hpY2FsOiB0cnVlLFxuICBzdGF0ZXM6IDEsXG4gIHRyYW5zaXRpb25Nb2RlOiAnbGVmdHJpZ2h0JyxcbiAgcmVncmVzc2lvbkVzdGltYXRvcjogJ2Z1bGwnLFxuICBsaWtlbGlob29kV2luZG93OiAxMCxcbn07XG5cbi8qKlxuICogUmVwcmVzZW50YXRpb24gb2YgYSBnZXN0dXJlIG1vZGVsLiBBIGluc3RhbmNlIG9mIGBYbW1Qcm9jZXNzb3JgIGNhblxuICogdHJhaW4gYSBtb2RlbCBmcm9tIGV4YW1wbGVzIGFuZCBjYW4gcGVyZm9ybSBjbGFzc2lmaWNhdGlvbiBhbmQvb3JcbiAqIHJlZ3Jlc3Npb24gZGVwZW5kaW5nIG9uIHRoZSBjaG9zZW4gYWxnb3JpdGhtLlxuICpcbiAqIFRoZSB0cmFpbmluZyBpcyBjdXJyZW50bHkgYmFzZWQgb24gdGhlIHByZXNlbmNlIG9mIGEgcmVtb3RlIHNlcnZlci1zaWRlXG4gKiBBUEksIHRoYXQgbXVzdCBiZSBhYmxlIHRvIHByb2Nlc3MgcmFwaWRNaXggY29tcGxpYW50IEpTT04gZm9ybWF0cy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIE92ZXJyaWRlIGRlZmF1bHQgcGFyYW1ldGVyc1xuICogQHBhcmFtIHtTdHJpbmd9IFtvcHRpb25zLnVybD0naHR0cHM6Ly9jb21vLmlyY2FtLmZyL2FwaS92MS90cmFpbiddIC0gVXJsXG4gKiAgb2YgdGhlIHRyYWluaW5nIGVuZCBwb2ludC5cbiAqXG4gKiBAZXhhbXBsZVxuICogaW1wb3J0ICogYXMgbWFubyBmcm9tICdtYW5vLWpzL2NsaWVudCc7XG4gKlxuICogY29uc3QgcHJvY2Vzc2VkU2Vuc29ycyA9IG5ldyBtYW5vLlByb2Nlc3NlZFNlbnNvcnMoKTtcbiAqIGNvbnN0IGV4YW1wbGUgPSBuZXcgbWFuby5FeGFtcGxlKCk7XG4gKiBjb25zdCB0cmFpbmluZ1NldCA9IG5ldyBtYW5vLlRyYWluaW5nU2V0KCk7XG4gKiBjb25zdCB4bW1Qcm9jZXNzb3IgPSBuZXcgbWFuby5YbW1Qcm9jZXNzc29yKCk7XG4gKlxuICogZXhhbXBsZS5zZXRMYWJlbCgndGVzdCcpO1xuICogcHJvY2Vzc2VkU2Vuc29ycy5hZGRMaXN0ZW5lcihleGFtcGxlLmFkZEVsZW1lbnQpO1xuICpcbiAqIC8vIGxhdGVyXG4gKiBwcm9jZXNzZWRTZW5zb3JzLnJlbW92ZUxpc3RlbmVyKGV4YW1wbGUuYWRkRWxlbWVudCk7XG4gKiBjb25zdCByYXBpZE1peEpzb25FeGFtcGxlID0gZXhhbXBsZS50b0pTT04oKTtcbiAqXG4gKiB0cmFpbmluZ1NldC5hZGRFeGFtcGxlKHJhcGlkTWl4SnNvbkV4YW1wbGUpO1xuICogY29uc3QgcmFwaWRNaXhKc29uVHJhaW5pbmdTZXQgPSB0cmFpbmluZ1NldC50b0pTT04oKTtcbiAqXG4gKiB4bW1Qcm9jZXNzb3JcbiAqICAgLnRyYWluKHJhcGlkTWl4SnNvblRyYWluaW5nU2V0KVxuICogICAudGhlbigoKSA9PiB7XG4gKiAgICAgLy8gc3RhcnQgZGVjb2RpbmdcbiAqICAgICBwcm9jZXNzZWRTZW5zb3JzLmFkZExpc3RlbmVyKGRhdGEgPT4ge1xuICogICAgICAgY29uc3QgcmVzdWx0cyA9IHhtbVByb2Nlc3Nvci5ydW4oZGF0YSk7XG4gKiAgICAgICBjb25zb2xlLmxvZyhyZXN1bHRzKTtcbiAqICAgICB9KTtcbiAqICAgfSk7XG4gKi9cbmNsYXNzIFhtbVByb2Nlc3NvciB7XG4gIGNvbnN0cnVjdG9yKHtcbiAgICB1cmwgPSAnaHR0cHM6Ly9jb21vLmlyY2FtLmZyL2FwaS92MS90cmFpbicsXG4gIH0gPSB7fSkge1xuICAgIHRoaXMudXJsID0gdXJsO1xuXG4gICAgdGhpcy5fY29uZmlnID0ge307XG4gICAgdGhpcy5fZGVjb2RlciA9IG51bGw7XG4gICAgdGhpcy5fbW9kZWwgPSBudWxsO1xuICAgIHRoaXMuX21vZGVsVHlwZSA9IG51bGw7XG4gICAgdGhpcy5fbGlrZWxpaG9vZFdpbmRvdyA9IG51bGw7XG5cbiAgICB0aGlzLnNldENvbmZpZyhkZWZhdWx0WG1tQ29uZmlnKTtcbiAgICB0aGlzLl9zZXREZWNvZGVyKCk7XG4gIH1cblxuICBfc2V0RGVjb2RlcigpIHtcbiAgICBzd2l0Y2ggKHRoaXMuX21vZGVsVHlwZSkge1xuICAgICAgY2FzZSAnaGhtbSc6XG4gICAgICAgIHRoaXMuX2RlY29kZXIgPSBuZXcgWG1tLkhobW1EZWNvZGVyKHRoaXMuX2xpa2VsaWhvb2RXaW5kb3cpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2dtbSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aGlzLl9kZWNvZGVyID0gbmV3IFhtbS5HbW1EZWNvZGVyKHRoaXMuX2xpa2VsaWhvb2RXaW5kb3cpO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmVzZXQgdGhlIG1vZGVsJ3MgdGVtcG9yYWwgZGVjb2Rpbmcgc3RhdGUuIElzIG9ubHkgdmFsaWQgb24gYGhobW1gIGRlY29kZXIuXG4gICAqL1xuICByZXNldCgpIHtcbiAgICBpZiAodGhpcy5fZGVjb2Rlci5yZXNldClcbiAgICAgIHRoaXMuX2RlY29kZXIucmVzZXQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUcmFpbiB0aGUgbW9kZWwgYWNjb3JkaW5nIHRvIHRoZSBnaXZlbiBgVHJhaW5pbmdTZXRgLiBJbiB0aGlzIGltcGxtZW50YXRpb25cbiAgICogdGhlIHRyYWluaW5nIGlzIHBlcmZvcm1lZCBzZXJ2ZXItc2lkZSBhbmQgcmVseSBvbiBhbiBYSFIgY2FsbC5cbiAgICpcbiAgICogQHBhcmFtIHtKU09OfSB0cmFpbmluZ1NldCAtIFJhcGlkTWl4IGNvbXBsaWFudCBKU09OIGZvcm1hdHRlZCB0cmFpbmluZyBzZXRcbiAgICogQHJldHVybiB7UHJvbWlzZX0gLSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgb24gdGhlIEFQSSByZXNwb25zZSAoUmFwaWRNaXggQVBJXG4gICAqICByZXNwb25zZSBmb3JtYXQpLCB3aGVuIHRoZSBtb2RlbCBpcyB1cGRhdGVkLlxuICAgKi9cbiAgdHJhaW4odHJhaW5pbmdTZXQpIHtcbiAgICAvLyBSRVNUIHJlcXVlc3QgLyByZXNwb25zZSAtIFJhcGlkTWl4XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGNvbnN0IHRyYWluaW5nRGF0YSA9IHtcbiAgICAgICAgZG9jVHlwZTogJ3JhcGlkLW1peDptbDpodHRwLXJlcXVlc3QnLFxuICAgICAgICBkb2NWZXJzaW9uOiByYXBpZE1peEFkYXB0ZXJzLlJBUElEX01JWF9ET0NfVkVSU0lPTixcbiAgICAgICAgY29uZmlndXJhdGlvbjogdGhpcy5nZXRDb25maWcoKSxcbiAgICAgICAgdHJhaW5pbmdTZXQ6IHRyYWluaW5nU2V0XG4gICAgICB9O1xuXG4gICAgICBjb25zdCB4aHIgPSBpc05vZGUoKSA/IG5ldyBYSFIoKSA6IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgICB4aHIub3BlbigncG9zdCcsIHRoaXMudXJsLCB0cnVlKTtcbiAgICAgIHhoci5yZXNwb25zZVR5cGUgPSAnanNvbic7XG4gICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luJywgJyonKTtcbiAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdDb250ZW50LVR5cGUnLCAnYXBwbGljYXRpb24vanNvbicpO1xuXG4gICAgICBjb25zdCBlcnJvck1zZyA9ICdhbiBlcnJvciBvY2N1cmVkIHdoaWxlIHRyYWluaW5nIHRoZSBtb2RlbC4gJztcblxuICAgICAgaWYgKGlzTm9kZSgpKSB7IC8vIFhNTEh0dHBSZXF1ZXN0IG1vZHVsZSBvbmx5IHN1cHBvcnRzIHhociB2MVxuICAgICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gKCkgPT4ge1xuICAgICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gNCkge1xuICAgICAgICAgICAgaWYgKHhoci5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICAgICAgICBjb25zdCBib2R5ID0gSlNPTi5wYXJzZSh4aHIucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgICAgICAgdGhpcy5fZGVjb2Rlci5zZXRNb2RlbChib2R5Lm1vZGVsLnBheWxvYWQpO1xuICAgICAgICAgICAgICB0aGlzLl9tb2RlbCA9IGJvZHkubW9kZWw7XG4gICAgICAgICAgICAgIHJlc29sdmUoYm9keSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JNc2cgKyBgcmVzcG9uc2UgOiAke3hoci5zdGF0dXN9IC0gJHt4aHIucmVzcG9uc2VUZXh0fWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHsgLy8gdXNlIHhociB2MlxuICAgICAgICB4aHIub25sb2FkID0gKCkgPT4ge1xuICAgICAgICAgIGlmICh4aHIuc3RhdHVzID09PSAyMDApIHtcbiAgICAgICAgICAgIGNvbnN0IGJvZHkgPSB4aHIucmVzcG9uc2U7XG4gICAgICAgICAgICB0aGlzLl9kZWNvZGVyLnNldE1vZGVsKGJvZHkubW9kZWwucGF5bG9hZCk7XG4gICAgICAgICAgICB0aGlzLl9tb2RlbCA9IGJvZHkubW9kZWw7XG4gICAgICAgICAgICByZXNvbHZlKGJvZHkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JNc2cgKyBgcmVzcG9uc2UgOiAke3hoci5zdGF0dXN9IC0gJHt4aHIucmVzcG9uc2V9YCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHhoci5vbmVycm9yID0gKCkgPT4ge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvck1zZyArIGByZXNwb25zZSA6ICR7eGhyLnN0YXR1c30gLSAke3hoci5yZXNwb25zZX1gKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB4aHIuc2VuZChKU09OLnN0cmluZ2lmeSh0cmFpbmluZ0RhdGEpKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQZXJmb3JtIHRoZSBjYWxzc2lmaWNhdGlvbiBvciB0aGUgcmVncmVzc2lvbiBvZiB0aGUgZ2l2ZW4gdmVjdG9yLlxuICAgKlxuICAgKiBAcGFyYW0ge0Zsb2F0MzJBcnJheXxBcnJheX0gdmVjdG9yIC0gSW5wdXQgdmVjdG9yIGZvciB0aGUgZGVjb2RpbmcuXG4gICAqIEByZXR1cm4ge09iamVjdH0gcmVzdWx0cyAtIE9iamVjdCBjb250YWluaW5nIHRoZSBkZWNvZGluZyByZXN1bHRzLlxuICAgKi9cbiAgcnVuKHZlY3Rvcikge1xuICAgIGlmICh2ZWN0b3IgaW5zdGFuY2VvZiBGbG9hdDMyQXJyYXkgfHwgdmVjdG9yIGluc3RhbmNlb2YgRmxvYXQ2NEFycmF5KSB7XG4gICAgICB2ZWN0b3IgPSBBcnJheS5mcm9tKHZlY3Rvcik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX2RlY29kZXIuZmlsdGVyKHZlY3Rvcik7XG4gIH1cblxuICAvKipcbiAgICogUmFwaWRNaXggY29tcGxpYW50IGNvbmZpZ3VyYXRpb24gb2JqZWN0LlxuICAgKlxuICAgKiBAcmV0dXJuIHtPYmplY3R9IC0gUmFwaWRNaXggQ29uZmlndXJhdGlvbiBvYmplY3QuXG4gICAqL1xuICBnZXRDb25maWcoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRvY1R5cGU6ICdyYXBpZC1taXg6bWw6Y29uZmlndXJhdGlvbicsXG4gICAgICBkb2NWZXJzaW9uOiByYXBpZE1peEFkYXB0ZXJzLlJBUElEX01JWF9ET0NfVkVSU0lPTixcbiAgICAgIHRhcmdldDoge1xuICAgICAgICBuYW1lOiBgeG1tOiR7dGhpcy5fbW9kZWxUeXBlfWAsXG4gICAgICAgIHZlcnNpb246ICcxLjAuMCdcbiAgICAgIH0sXG4gICAgICBwYXlsb2FkOiB0aGlzLl9jb25maWcsXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIG1vZGVsIGNvbmZpZ3VyYXRpb24gcGFyYW1ldGVycyAob3IgYSBzdWJzZXQgb2YgdGhlbSkuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgLSBSYXBpZE1peCBjb25maWd1cmF0aW9uIG9iamVjdCAob3IgcGF5bG9hZCksIG9yIHN1YnNldCBvZiBwYXJhbWV0ZXJzLlxuICAgKi9cbiAgc2V0Q29uZmlnKGNvbmZpZyA9IHt9KSB7XG4gICAgaWYgKCFjb25maWcpXG4gICAgICByZXR1cm47XG5cbiAgICAvLyByZXBsYWNlIGxhdGVyIGJ5IGlzVmFsaWRSYXBpZE1peENvbmZpZ3VyYXRpb24gKG1vZGVsVHlwZSBzaG91bGRuJ3QgYmUgYWxsb3dlZCBpbiBwYXlsb2FkKVxuICAgIGlmIChjb25maWcuZG9jVHlwZSA9PT0gJ3JhcGlkLW1peDptbDpjb25maWd1cmF0aW9uJyAmJiBjb25maWcuZG9jVmVyc2lvbiAmJiBjb25maWcucGF5bG9hZCAmJlxuICAgICAgICBjb25maWcudGFyZ2V0ICYmIGNvbmZpZy50YXJnZXQubmFtZSAmJiBjb25maWcudGFyZ2V0Lm5hbWUuc3BsaXQoJzonKVswXSA9PT0gJ3htbScpIHtcblxuICAgICAgY29uc3QgdGFyZ2V0ID0gY29uZmlnLnRhcmdldC5uYW1lLnNwbGl0KCc6Jyk7XG4gICAgICBjb25maWcgPSBjb25maWcucGF5bG9hZDtcbiAgICAgIGlmICh0YXJnZXQubGVuZ3RoID4gMSAmJiBrbm93blRhcmdldHMueG1tLmluZGV4T2YodGFyZ2V0WzFdKSA+IC0xKSB7XG4gICAgICAgIGlmICh0aGlzLl9tb2RlbFR5cGUgIT09IHRhcmdldFsxXSkge1xuICAgICAgICAgIHRoaXMuX21vZGVsVHlwZSA9IHRhcmdldFsxXTtcbiAgICAgICAgICB0aGlzLl9zZXREZWNvZGVyKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY29uZmlnLm1vZGVsVHlwZSAmJiBrbm93blRhcmdldHNbJ3htbSddLmluZGV4T2YoY29uZmlnLm1vZGVsVHlwZSkgPiAtMSkge1xuICAgICAgY29uc3QgdmFsID0gY29uZmlnLm1vZGVsVHlwZTtcbiAgICAgIGNvbnN0IG5ld01vZGVsID0gKHZhbCA9PT0gJ2dtcicpID8gJ2dtbScgOiAoKHZhbCA9PT0gJ2hobXInKSA/ICdoaG1tJyA6IHZhbCk7XG5cbiAgICAgIGlmIChuZXdNb2RlbCAhPT0gdGhpcy5fbW9kZWxUeXBlKSB7XG4gICAgICAgIHRoaXMuX21vZGVsVHlwZSA9IG5ld01vZGVsO1xuICAgICAgICB0aGlzLl9zZXREZWNvZGVyKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yIChsZXQga2V5IG9mIE9iamVjdC5rZXlzKGNvbmZpZykpIHtcbiAgICAgIGNvbnN0IHZhbCA9IGNvbmZpZ1trZXldO1xuXG4gICAgICBpZiAoKGtleSA9PT0gJ2dhdXNzaWFucycgJiYgTnVtYmVyLmlzSW50ZWdlcih2YWwpICYmIHZhbCA+IDApIHx8XG4gICAgICAgICAgKGtleSA9PT0gJ2Fic29sdXRlUmVndWxhcml6YXRpb24nICYmIHR5cGVvZiB2YWwgPT09ICdudW1iZXInICYmIHZhbCA+IDApIHx8XG4gICAgICAgICAgKGtleSA9PT0gJ3JlbGF0aXZlUmVndWxhcml6YXRpb24nICYmIHR5cGVvZiB2YWwgPT09ICdudW1iZXInICYmIHZhbCA+IDApIHx8XG4gICAgICAgICAgKGtleSA9PT0gJ2NvdmFyaWFuY2VNb2RlJyAmJiB0eXBlb2YgdmFsID09PSAnc3RyaW5nJyAmJlxuICAgICAgICAgICAgWydmdWxsJywgJ2RpYWdvbmFsJ10uaW5kZXhPZih2YWwpID4gLTEpIHx8XG4gICAgICAgICAgKGtleSA9PT0gJ2hpZXJhcmNoaWNhbCcgJiYgdHlwZW9mIHZhbCA9PT0gJ2Jvb2xlYW4nKSB8fFxuICAgICAgICAgIChrZXkgPT09ICdzdGF0ZXMnICYmIE51bWJlci5pc0ludGVnZXIodmFsKSAmJiB2YWwgPiAwKSB8fFxuICAgICAgICAgIChrZXkgPT09ICd0cmFuc2l0aW9uTW9kZScgJiYgdHlwZW9mIHZhbCA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgICAgIFsnbGVmdHJpZ2h0JywgJ2VyZ29kaWMnXS5pbmRleE9mKHZhbCkgPiAtMSkgfHxcbiAgICAgICAgICAoa2V5ID09PSAncmVncmVzc2lvbkVzdGltYXRvcicgJiYgdHlwZW9mIHZhbCA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgICAgIFsnZnVsbCcsICd3aW5kb3dlZCcsICdsaWtlbGllc3QnXS5pbmRleE9mKHZhbCkgPiAtMSkpIHtcbiAgICAgICAgdGhpcy5fY29uZmlnW2tleV0gPSB2YWw7XG4gICAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ2xpa2VsaWhvb2RXaW5kb3cnICYmIE51bWJlci5pc0ludGVnZXIodmFsKSAmJiB2YWwgPiAwKSB7XG4gICAgICAgIHRoaXMuX2xpa2VsaWhvb2RXaW5kb3cgPSB2YWw7XG5cbiAgICAgICAgaWYgKHRoaXMuX2RlY29kZXIgIT09IG51bGwpIHtcbiAgICAgICAgICB0aGlzLl9kZWNvZGVyLnNldExpa2VsaWhvb2RXaW5kb3codGhpcy5fbGlrZWxpaG9vZFdpbmRvdyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmV0cmlldmUgdGhlIG1vZGVsIGluIFJhcGlkTWl4IG1vZGVsIGZvcm1hdC5cbiAgICpcbiAgICogQHJldHVybiB7T2JqZWN0fSAtIEN1cnJlbnQgUmFwaWRNaXggTW9kZWwgb2JqZWN0LlxuICAgKi9cbiAgZ2V0TW9kZWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuX21vZGVsO1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZSB0aGUgZ2l2ZW4gUmFwaWRNaXggbW9kZWwgb2JqZWN0IGZvciB0aGUgZGVjb2RpbmcuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBtb2RlbCAtIFJhcGlkTWl4IE1vZGVsIG9iamVjdC5cbiAgICovXG4gIHNldE1vZGVsKG1vZGVsKSB7XG4gICAgaWYgKCFtb2RlbCkge1xuICAgICAgdGhpcy5tb2RlbCA9IG51bGw7XG4gICAgICB0aGlzLl9kZWNvZGVyLnNldE1vZGVsKG51bGwpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHRhcmdldHMgPSBtb2RlbC50YXJnZXQubmFtZS5zcGxpdCgnOicpO1xuICAgIGNvbnN0IGxpYiA9IHRhcmdldHNbMF07XG4gICAgY29uc3QgYWxnbyA9IHRhcmdldHNbMV07XG5cbiAgICBpZiAobGliID09PSAneG1tJykge1xuICAgICAgdGhpcy5fbW9kZWxUeXBlID0gYWxnbyA9PT0gJ2hobW0nID8gYWxnbyA6ICdnbW0nO1xuXG4gICAgICB0aGlzLl9zZXREZWNvZGVyKCk7XG4gICAgICB0aGlzLl9tb2RlbCA9IG1vZGVsO1xuICAgICAgdGhpcy5fZGVjb2Rlci5zZXRNb2RlbChtb2RlbC5wYXlsb2FkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHR5cGUgJHtsaWJ9YCk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFhtbVByb2Nlc3NvcjtcbiJdfQ==