'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rapidMixToXmmTrainingSet = exports.xmmToRapidMixTrainingSet = undefined;

var _xmmClient = require('xmm-client');

var Xmm = _interopRequireWildcard(_xmmClient);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var xmmToRapidMixTrainingSet = function xmmToRapidMixTrainingSet(xmmSet) {
  // TODO
  return null;
};

var rapidMixToXmmTrainingSet = function rapidMixToXmmTrainingSet(rmSet) {
  var payload = rmSet.payload;

  var phraseMaker = new Xmm.PhraseMaker({
    bimodal: payload.outputDimension > 0,
    dimension: payload.inputDimension + payload.outputDimension,
    dimensionInput: payload.inputDimension
  });
  var setMaker = new Xmm.SetMaker();

  for (var i in payload.data) {
    phraseMaker.reset();
    phraseMaker.setConfig({ label: payload.data[i].label });

    for (var j = 0; j < payload.data[i].input.length; j++) {
      var vector = payload.data[i].input[j];

      if (payload.outputDimension > 0) vector = vector.concat(payload.data[i].output[j]);

      phraseMaker.addObservation(vector);
    }

    setMaker.addPhrase(phraseMaker.getPhrase());
  }

  return setMaker.getTrainingSet();
};

exports.xmmToRapidMixTrainingSet = xmmToRapidMixTrainingSet;
exports.rapidMixToXmmTrainingSet = rapidMixToXmmTrainingSet;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZhbGlkYXRvcnMuanMiXSwibmFtZXMiOlsiWG1tIiwieG1tVG9SYXBpZE1peFRyYWluaW5nU2V0IiwicmFwaWRNaXhUb1htbVRyYWluaW5nU2V0IiwicGF5bG9hZCIsInJtU2V0IiwicGhyYXNlTWFrZXIiLCJQaHJhc2VNYWtlciIsImJpbW9kYWwiLCJvdXRwdXREaW1lbnNpb24iLCJkaW1lbnNpb24iLCJpbnB1dERpbWVuc2lvbiIsImRpbWVuc2lvbklucHV0Iiwic2V0TWFrZXIiLCJTZXRNYWtlciIsImkiLCJkYXRhIiwicmVzZXQiLCJzZXRDb25maWciLCJsYWJlbCIsImoiLCJpbnB1dCIsImxlbmd0aCIsInZlY3RvciIsImNvbmNhdCIsIm91dHB1dCIsImFkZE9ic2VydmF0aW9uIiwiYWRkUGhyYXNlIiwiZ2V0UGhyYXNlIiwiZ2V0VHJhaW5pbmdTZXQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7SUFBWUEsRzs7OztBQUVaLElBQU1DLDJCQUEyQixTQUEzQkEsd0JBQTJCLFNBQVU7QUFDekM7QUFDQSxTQUFPLElBQVA7QUFDRCxDQUhEOztBQUtBLElBQU1DLDJCQUEyQixTQUEzQkEsd0JBQTJCLFFBQVM7QUFDeEMsTUFBTUMsVUFBVUMsTUFBTUQsT0FBdEI7O0FBRUEsTUFBTUUsY0FBYyxJQUFJTCxJQUFJTSxXQUFSLENBQW9CO0FBQ3RDQyxhQUFTSixRQUFRSyxlQUFSLEdBQTBCLENBREc7QUFFdENDLGVBQVdOLFFBQVFPLGNBQVIsR0FBeUJQLFFBQVFLLGVBRk47QUFHdENHLG9CQUFnQlIsUUFBUU87QUFIYyxHQUFwQixDQUFwQjtBQUtBLE1BQU1FLFdBQVcsSUFBSVosSUFBSWEsUUFBUixFQUFqQjs7QUFFQSxPQUFLLElBQUlDLENBQVQsSUFBY1gsUUFBUVksSUFBdEIsRUFBNEI7QUFDMUJWLGdCQUFZVyxLQUFaO0FBQ0FYLGdCQUFZWSxTQUFaLENBQXNCLEVBQUVDLE9BQU9mLFFBQVFZLElBQVIsQ0FBYUQsQ0FBYixFQUFnQkksS0FBekIsRUFBdEI7O0FBRUEsU0FBSyxJQUFJQyxJQUFJLENBQWIsRUFBZ0JBLElBQUloQixRQUFRWSxJQUFSLENBQWFELENBQWIsRUFBZ0JNLEtBQWhCLENBQXNCQyxNQUExQyxFQUFrREYsR0FBbEQsRUFBdUQ7QUFDckQsVUFBSUcsU0FBU25CLFFBQVFZLElBQVIsQ0FBYUQsQ0FBYixFQUFnQk0sS0FBaEIsQ0FBc0JELENBQXRCLENBQWI7O0FBRUEsVUFBSWhCLFFBQVFLLGVBQVIsR0FBMEIsQ0FBOUIsRUFDRWMsU0FBU0EsT0FBT0MsTUFBUCxDQUFjcEIsUUFBUVksSUFBUixDQUFhRCxDQUFiLEVBQWdCVSxNQUFoQixDQUF1QkwsQ0FBdkIsQ0FBZCxDQUFUOztBQUVGZCxrQkFBWW9CLGNBQVosQ0FBMkJILE1BQTNCO0FBQ0Q7O0FBRURWLGFBQVNjLFNBQVQsQ0FBbUJyQixZQUFZc0IsU0FBWixFQUFuQjtBQUNEOztBQUVELFNBQU9mLFNBQVNnQixjQUFULEVBQVA7QUFDRCxDQTNCRDs7UUE2QlMzQix3QixHQUFBQSx3QjtRQUEwQkMsd0IsR0FBQUEsd0IiLCJmaWxlIjoidmFsaWRhdG9ycy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFhtbSBmcm9tICd4bW0tY2xpZW50JztcblxuY29uc3QgeG1tVG9SYXBpZE1peFRyYWluaW5nU2V0ID0geG1tU2V0ID0+IHtcbiAgLy8gVE9ET1xuICByZXR1cm4gbnVsbDtcbn1cblxuY29uc3QgcmFwaWRNaXhUb1htbVRyYWluaW5nU2V0ID0gcm1TZXQgPT4ge1xuICBjb25zdCBwYXlsb2FkID0gcm1TZXQucGF5bG9hZDtcblxuICBjb25zdCBwaHJhc2VNYWtlciA9IG5ldyBYbW0uUGhyYXNlTWFrZXIoe1xuICAgIGJpbW9kYWw6IHBheWxvYWQub3V0cHV0RGltZW5zaW9uID4gMCxcbiAgICBkaW1lbnNpb246IHBheWxvYWQuaW5wdXREaW1lbnNpb24gKyBwYXlsb2FkLm91dHB1dERpbWVuc2lvbixcbiAgICBkaW1lbnNpb25JbnB1dDogcGF5bG9hZC5pbnB1dERpbWVuc2lvbixcbiAgfSk7XG4gIGNvbnN0IHNldE1ha2VyID0gbmV3IFhtbS5TZXRNYWtlcigpO1xuXG4gIGZvciAobGV0IGkgaW4gcGF5bG9hZC5kYXRhKSB7XG4gICAgcGhyYXNlTWFrZXIucmVzZXQoKTtcbiAgICBwaHJhc2VNYWtlci5zZXRDb25maWcoeyBsYWJlbDogcGF5bG9hZC5kYXRhW2ldLmxhYmVsIH0pO1xuXG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBwYXlsb2FkLmRhdGFbaV0uaW5wdXQubGVuZ3RoOyBqKyspIHtcbiAgICAgIGxldCB2ZWN0b3IgPSBwYXlsb2FkLmRhdGFbaV0uaW5wdXRbal07XG5cbiAgICAgIGlmIChwYXlsb2FkLm91dHB1dERpbWVuc2lvbiA+IDApXG4gICAgICAgIHZlY3RvciA9IHZlY3Rvci5jb25jYXQocGF5bG9hZC5kYXRhW2ldLm91dHB1dFtqXSk7XG5cbiAgICAgIHBocmFzZU1ha2VyLmFkZE9ic2VydmF0aW9uKHZlY3Rvcik7XG4gICAgfVxuXG4gICAgc2V0TWFrZXIuYWRkUGhyYXNlKHBocmFzZU1ha2VyLmdldFBocmFzZSgpKTtcbiAgfVxuXG4gIHJldHVybiBzZXRNYWtlci5nZXRUcmFpbmluZ1NldCgpO1xufVxuXG5leHBvcnQgeyB4bW1Ub1JhcGlkTWl4VHJhaW5pbmdTZXQsIHJhcGlkTWl4VG9YbW1UcmFpbmluZ1NldCB9O1xuIl19