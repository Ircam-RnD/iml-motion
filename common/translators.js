'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rapidMixToXmmTrainingSet = exports.xmmToRapidMixTrainingSet = undefined;

var _xmmClient = require('xmm-client');

var Xmm = _interopRequireWildcard(_xmmClient);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var xmmToRapidMixTrainingSet = function xmmToRapidMixTrainingSet(xmmSet) {
  // TODO
  return null;
};

var rapidMixToXmmTrainingSet = function rapidMixToXmmTrainingSet(rmSet) {
  var payload = rmSet.payload;

  var phraseMaker = new Xmm.PhraseMaker({
    bimodal: payload.outputDimension > 0,
    dimension: payload.inputDimension + payload.outputDimension,
    dimensionInput: payload.outputDimension > 0 ? payload.inputDimension : 0
  });
  var setMaker = new Xmm.SetMaker();

  for (var i in payload.data) {
    phraseMaker.reset();
    phraseMaker.setConfig({ label: payload.data[i].label });

    for (var j = 0; j < payload.data[i].input.length; j++) {
      var vector = payload.data[i].input[j];

      if (payload.outputDimension > 0) vector = vector.concat(payload.data[i].output[j]);

      phraseMaker.addObservation(vector);
    }

    setMaker.addPhrase(phraseMaker.getPhrase());
  }

  return setMaker.getTrainingSet();
};

exports.xmmToRapidMixTrainingSet = xmmToRapidMixTrainingSet;
exports.rapidMixToXmmTrainingSet = rapidMixToXmmTrainingSet;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZhbGlkYXRvcnMuanMiXSwibmFtZXMiOlsiWG1tIiwieG1tVG9SYXBpZE1peFRyYWluaW5nU2V0IiwicmFwaWRNaXhUb1htbVRyYWluaW5nU2V0IiwicGF5bG9hZCIsInJtU2V0IiwicGhyYXNlTWFrZXIiLCJQaHJhc2VNYWtlciIsImJpbW9kYWwiLCJvdXRwdXREaW1lbnNpb24iLCJkaW1lbnNpb24iLCJpbnB1dERpbWVuc2lvbiIsImRpbWVuc2lvbklucHV0Iiwic2V0TWFrZXIiLCJTZXRNYWtlciIsImkiLCJkYXRhIiwicmVzZXQiLCJzZXRDb25maWciLCJsYWJlbCIsImoiLCJpbnB1dCIsImxlbmd0aCIsInZlY3RvciIsImNvbmNhdCIsIm91dHB1dCIsImFkZE9ic2VydmF0aW9uIiwiYWRkUGhyYXNlIiwiZ2V0UGhyYXNlIiwiZ2V0VHJhaW5pbmdTZXQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7SUFBWUEsRzs7OztBQUVaLElBQU1DLDJCQUEyQixTQUEzQkEsd0JBQTJCLFNBQVU7QUFDekM7QUFDQSxTQUFPLElBQVA7QUFDRCxDQUhEOztBQUtBLElBQU1DLDJCQUEyQixTQUEzQkEsd0JBQTJCLFFBQVM7QUFDeEMsTUFBTUMsVUFBVUMsTUFBTUQsT0FBdEI7O0FBRUEsTUFBTUUsY0FBYyxJQUFJTCxJQUFJTSxXQUFSLENBQW9CO0FBQ3RDQyxhQUFTSixRQUFRSyxlQUFSLEdBQTBCLENBREc7QUFFdENDLGVBQVdOLFFBQVFPLGNBQVIsR0FBeUJQLFFBQVFLLGVBRk47QUFHdENHLG9CQUFpQlIsUUFBUUssZUFBUixHQUEwQixDQUEzQixHQUFnQ0wsUUFBUU8sY0FBeEMsR0FBeUQ7QUFIbkMsR0FBcEIsQ0FBcEI7QUFLQSxNQUFNRSxXQUFXLElBQUlaLElBQUlhLFFBQVIsRUFBakI7O0FBRUEsT0FBSyxJQUFJQyxDQUFULElBQWNYLFFBQVFZLElBQXRCLEVBQTRCO0FBQzFCVixnQkFBWVcsS0FBWjtBQUNBWCxnQkFBWVksU0FBWixDQUFzQixFQUFFQyxPQUFPZixRQUFRWSxJQUFSLENBQWFELENBQWIsRUFBZ0JJLEtBQXpCLEVBQXRCOztBQUVBLFNBQUssSUFBSUMsSUFBSSxDQUFiLEVBQWdCQSxJQUFJaEIsUUFBUVksSUFBUixDQUFhRCxDQUFiLEVBQWdCTSxLQUFoQixDQUFzQkMsTUFBMUMsRUFBa0RGLEdBQWxELEVBQXVEO0FBQ3JELFVBQUlHLFNBQVNuQixRQUFRWSxJQUFSLENBQWFELENBQWIsRUFBZ0JNLEtBQWhCLENBQXNCRCxDQUF0QixDQUFiOztBQUVBLFVBQUloQixRQUFRSyxlQUFSLEdBQTBCLENBQTlCLEVBQ0VjLFNBQVNBLE9BQU9DLE1BQVAsQ0FBY3BCLFFBQVFZLElBQVIsQ0FBYUQsQ0FBYixFQUFnQlUsTUFBaEIsQ0FBdUJMLENBQXZCLENBQWQsQ0FBVDs7QUFFRmQsa0JBQVlvQixjQUFaLENBQTJCSCxNQUEzQjtBQUNEOztBQUVEVixhQUFTYyxTQUFULENBQW1CckIsWUFBWXNCLFNBQVosRUFBbkI7QUFDRDs7QUFFRCxTQUFPZixTQUFTZ0IsY0FBVCxFQUFQO0FBQ0QsQ0EzQkQ7O1FBNkJTM0Isd0IsR0FBQUEsd0I7UUFBMEJDLHdCLEdBQUFBLHdCIiwiZmlsZSI6InZhbGlkYXRvcnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBYbW0gZnJvbSAneG1tLWNsaWVudCc7XG5cbmNvbnN0IHhtbVRvUmFwaWRNaXhUcmFpbmluZ1NldCA9IHhtbVNldCA9PiB7XG4gIC8vIFRPRE9cbiAgcmV0dXJuIG51bGw7XG59XG5cbmNvbnN0IHJhcGlkTWl4VG9YbW1UcmFpbmluZ1NldCA9IHJtU2V0ID0+IHtcbiAgY29uc3QgcGF5bG9hZCA9IHJtU2V0LnBheWxvYWQ7XG5cbiAgY29uc3QgcGhyYXNlTWFrZXIgPSBuZXcgWG1tLlBocmFzZU1ha2VyKHtcbiAgICBiaW1vZGFsOiBwYXlsb2FkLm91dHB1dERpbWVuc2lvbiA+IDAsXG4gICAgZGltZW5zaW9uOiBwYXlsb2FkLmlucHV0RGltZW5zaW9uICsgcGF5bG9hZC5vdXRwdXREaW1lbnNpb24sXG4gICAgZGltZW5zaW9uSW5wdXQ6IChwYXlsb2FkLm91dHB1dERpbWVuc2lvbiA+IDApID8gcGF5bG9hZC5pbnB1dERpbWVuc2lvbiA6IDAsXG4gIH0pO1xuICBjb25zdCBzZXRNYWtlciA9IG5ldyBYbW0uU2V0TWFrZXIoKTtcblxuICBmb3IgKGxldCBpIGluIHBheWxvYWQuZGF0YSkge1xuICAgIHBocmFzZU1ha2VyLnJlc2V0KCk7XG4gICAgcGhyYXNlTWFrZXIuc2V0Q29uZmlnKHsgbGFiZWw6IHBheWxvYWQuZGF0YVtpXS5sYWJlbCB9KTtcblxuICAgIGZvciAobGV0IGogPSAwOyBqIDwgcGF5bG9hZC5kYXRhW2ldLmlucHV0Lmxlbmd0aDsgaisrKSB7XG4gICAgICBsZXQgdmVjdG9yID0gcGF5bG9hZC5kYXRhW2ldLmlucHV0W2pdO1xuXG4gICAgICBpZiAocGF5bG9hZC5vdXRwdXREaW1lbnNpb24gPiAwKVxuICAgICAgICB2ZWN0b3IgPSB2ZWN0b3IuY29uY2F0KHBheWxvYWQuZGF0YVtpXS5vdXRwdXRbal0pO1xuXG4gICAgICBwaHJhc2VNYWtlci5hZGRPYnNlcnZhdGlvbih2ZWN0b3IpO1xuICAgIH1cblxuICAgIHNldE1ha2VyLmFkZFBocmFzZShwaHJhc2VNYWtlci5nZXRQaHJhc2UoKSk7XG4gIH1cblxuICByZXR1cm4gc2V0TWFrZXIuZ2V0VHJhaW5pbmdTZXQoKTtcbn1cblxuZXhwb3J0IHsgeG1tVG9SYXBpZE1peFRyYWluaW5nU2V0LCByYXBpZE1peFRvWG1tVHJhaW5pbmdTZXQgfTtcbiJdfQ==