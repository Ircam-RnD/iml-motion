'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rapidMixToXmmTrainingSet = exports.xmmToRapidMixTrainingSet = undefined;

var _xmmClient = require('xmm-client');

var Xmm = _interopRequireWildcard(_xmmClient);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var xmmToRapidMixTrainingSet = function xmmToRapidMixTrainingSet(xmmSet) {
  // TODO
  return null;
};

var rapidMixToXmmTrainingSet = function rapidMixToXmmTrainingSet(rmSet) {
  var payload = rmSet.payload;

  var phraseMaker = new Xmm.PhraseMaker({
    bimodal: payload.outputDimension > 0,
    dimension: payload.inputDimension + payload.outputDimension,
    dimensionInput: payload.outputDimension > 0 ? payload.inputDimension : 0
  });
  var setMaker = new Xmm.SetMaker();

  for (var i in payload.data) {
    phraseMaker.reset();
    phraseMaker.setConfig({ label: payload.data[i].label });

    for (var j = 0; j < payload.data[i].input.length; j++) {
      var vector = payload.data[i].input[j];

      if (payload.outputDimension > 0) vector = vector.concat(payload.data[i].output[j]);

      phraseMaker.addObservation(vector);
    }

    setMaker.addPhrase(phraseMaker.getPhrase());
  }

  return setMaker.getTrainingSet();
};

exports.xmmToRapidMixTrainingSet = xmmToRapidMixTrainingSet;
exports.rapidMixToXmmTrainingSet = rapidMixToXmmTrainingSet;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZhbGlkYXRvcnMuanMiXSwibmFtZXMiOlsiWG1tIiwieG1tVG9SYXBpZE1peFRyYWluaW5nU2V0IiwicmFwaWRNaXhUb1htbVRyYWluaW5nU2V0IiwicGF5bG9hZCIsInJtU2V0IiwicGhyYXNlTWFrZXIiLCJQaHJhc2VNYWtlciIsImJpbW9kYWwiLCJvdXRwdXREaW1lbnNpb24iLCJkaW1lbnNpb24iLCJpbnB1dERpbWVuc2lvbiIsImRpbWVuc2lvbklucHV0Iiwic2V0TWFrZXIiLCJTZXRNYWtlciIsImkiLCJkYXRhIiwicmVzZXQiLCJzZXRDb25maWciLCJsYWJlbCIsImoiLCJpbnB1dCIsImxlbmd0aCIsInZlY3RvciIsImNvbmNhdCIsIm91dHB1dCIsImFkZE9ic2VydmF0aW9uIiwiYWRkUGhyYXNlIiwiZ2V0UGhyYXNlIiwiZ2V0VHJhaW5pbmdTZXQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7SUFBWUEsRzs7OztBQUVaLElBQU1DLDJCQUEyQixTQUEzQkEsd0JBQTJCLFNBQVU7QUFDekM7QUFDQSxTQUFPLElBQVA7QUFDRCxDQUhEOztBQUtBLElBQU1DLDJCQUEyQixTQUEzQkEsd0JBQTJCLFFBQVM7QUFDeEMsTUFBTUMsVUFBVUMsTUFBTUQsT0FBdEI7O0FBRUEsTUFBTUUsY0FBYyxJQUFJTCxJQUFJTSxXQUFSLENBQW9CO0FBQ3RDQyxhQUFTSixRQUFRSyxlQUFSLEdBQTBCLENBREc7QUFFdENDLGVBQVdOLFFBQVFPLGNBQVIsR0FBeUJQLFFBQVFLLGVBRk47QUFHdENHLG9CQUFnQlIsUUFBUUssZUFBUixHQUEwQixDQUExQixHQUE4QkwsUUFBUU8sY0FBdEMsR0FBdUQ7QUFIakMsR0FBcEIsQ0FBcEI7QUFLQSxNQUFNRSxXQUFXLElBQUlaLElBQUlhLFFBQVIsRUFBakI7O0FBRUEsT0FBSyxJQUFJQyxDQUFULElBQWNYLFFBQVFZLElBQXRCLEVBQTRCO0FBQzFCVixnQkFBWVcsS0FBWjtBQUNBWCxnQkFBWVksU0FBWixDQUFzQixFQUFFQyxPQUFPZixRQUFRWSxJQUFSLENBQWFELENBQWIsRUFBZ0JJLEtBQXpCLEVBQXRCOztBQUVBLFNBQUssSUFBSUMsSUFBSSxDQUFiLEVBQWdCQSxJQUFJaEIsUUFBUVksSUFBUixDQUFhRCxDQUFiLEVBQWdCTSxLQUFoQixDQUFzQkMsTUFBMUMsRUFBa0RGLEdBQWxELEVBQXVEO0FBQ3JELFVBQUlHLFNBQVNuQixRQUFRWSxJQUFSLENBQWFELENBQWIsRUFBZ0JNLEtBQWhCLENBQXNCRCxDQUF0QixDQUFiOztBQUVBLFVBQUloQixRQUFRSyxlQUFSLEdBQTBCLENBQTlCLEVBQ0VjLFNBQVNBLE9BQU9DLE1BQVAsQ0FBY3BCLFFBQVFZLElBQVIsQ0FBYUQsQ0FBYixFQUFnQlUsTUFBaEIsQ0FBdUJMLENBQXZCLENBQWQsQ0FBVDs7QUFFRmQsa0JBQVlvQixjQUFaLENBQTJCSCxNQUEzQjtBQUNEOztBQUVEVixhQUFTYyxTQUFULENBQW1CckIsWUFBWXNCLFNBQVosRUFBbkI7QUFDRDs7QUFFRCxTQUFPZixTQUFTZ0IsY0FBVCxFQUFQO0FBQ0QsQ0EzQkQ7O1FBNkJTM0Isd0IsR0FBQUEsd0I7UUFBMEJDLHdCLEdBQUFBLHdCIiwiZmlsZSI6InZhbGlkYXRvcnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBYbW0gZnJvbSAneG1tLWNsaWVudCc7XG5cbmNvbnN0IHhtbVRvUmFwaWRNaXhUcmFpbmluZ1NldCA9IHhtbVNldCA9PiB7XG4gIC8vIFRPRE9cbiAgcmV0dXJuIG51bGw7XG59XG5cbmNvbnN0IHJhcGlkTWl4VG9YbW1UcmFpbmluZ1NldCA9IHJtU2V0ID0+IHtcbiAgY29uc3QgcGF5bG9hZCA9IHJtU2V0LnBheWxvYWQ7XG5cbiAgY29uc3QgcGhyYXNlTWFrZXIgPSBuZXcgWG1tLlBocmFzZU1ha2VyKHtcbiAgICBiaW1vZGFsOiBwYXlsb2FkLm91dHB1dERpbWVuc2lvbiA+IDAsXG4gICAgZGltZW5zaW9uOiBwYXlsb2FkLmlucHV0RGltZW5zaW9uICsgcGF5bG9hZC5vdXRwdXREaW1lbnNpb24sXG4gICAgZGltZW5zaW9uSW5wdXQ6IHBheWxvYWQub3V0cHV0RGltZW5zaW9uID4gMCA/IHBheWxvYWQuaW5wdXREaW1lbnNpb24gOiAwLFxuICB9KTtcbiAgY29uc3Qgc2V0TWFrZXIgPSBuZXcgWG1tLlNldE1ha2VyKCk7XG5cbiAgZm9yIChsZXQgaSBpbiBwYXlsb2FkLmRhdGEpIHtcbiAgICBwaHJhc2VNYWtlci5yZXNldCgpO1xuICAgIHBocmFzZU1ha2VyLnNldENvbmZpZyh7IGxhYmVsOiBwYXlsb2FkLmRhdGFbaV0ubGFiZWwgfSk7XG5cbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IHBheWxvYWQuZGF0YVtpXS5pbnB1dC5sZW5ndGg7IGorKykge1xuICAgICAgbGV0IHZlY3RvciA9IHBheWxvYWQuZGF0YVtpXS5pbnB1dFtqXTtcblxuICAgICAgaWYgKHBheWxvYWQub3V0cHV0RGltZW5zaW9uID4gMClcbiAgICAgICAgdmVjdG9yID0gdmVjdG9yLmNvbmNhdChwYXlsb2FkLmRhdGFbaV0ub3V0cHV0W2pdKTtcblxuICAgICAgcGhyYXNlTWFrZXIuYWRkT2JzZXJ2YXRpb24odmVjdG9yKTtcbiAgICB9XG5cbiAgICBzZXRNYWtlci5hZGRQaHJhc2UocGhyYXNlTWFrZXIuZ2V0UGhyYXNlKCkpO1xuICB9XG5cbiAgcmV0dXJuIHNldE1ha2VyLmdldFRyYWluaW5nU2V0KCk7XG59XG5cbmV4cG9ydCB7IHhtbVRvUmFwaWRNaXhUcmFpbmluZ1NldCwgcmFwaWRNaXhUb1htbVRyYWluaW5nU2V0IH07XG4iXX0=