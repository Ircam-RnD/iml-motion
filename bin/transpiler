#!/usr/bin/env node
const babel = require('babel-core');
const browserify = require('browserify');
var uglify = require('uglify-js');
const fse = require('fs-extra');

// transpile `src` into `dist`
module.exports.transpile = (src, dist, babelOptions) => {
  return new Promise((resolve, reject) => {
    babel.transformFile(src.abs, babelOptions, (err, result) => {
      if (err)
        return reject(err);

      fse.outputFile(dist.abs, result.code, err => {
        if (err)
          return reject(err);
        else
          return resolve([src, dist]);
      });
    });
  });
};

// delete a transpiled file
module.exports.delete = function(file) {
  return new Promise((resolve, reject) => {
    fse.stat(file.abs, (err, stats) => {
      if (err)
        return reject(err);

      if (stats.isFile()) {
        fse.remove(file.abs, err => {
          if (err)
            return reject(err);
          else
            return resolve(file);
        });
      }
    });
  });

  // @todo - bundle
  // @todo - uglify
};

/**
 * Transform a given file to it's browserified version, client only.
 * Only clients have their browserified counterparts, each folder in `src/client`
 * is considered has a separate browserified client file. The `index.js` in each
 * folder defines the entry point of the particular client. The browserified
 * file is name after the name of the folder.
 */
module.exports.bundle = function(entryPoint, outFilename, browserifyOptions) {
  return new Promise((resolve, reject) => {
    if (entryPoint === undefined || !isAllowed(entryPoint))
      return;

    const bundler = browserify(entryPoint, browserifyOptions);
    const startTime = new Date().getTime();

    log.bundleStart(outFilename);
    fse.ensureFileSync(outFilename); // ensure file exists

    const writeStream = fse.createWriteStream(outFilename);

    bundler
      .bundle()
      .on('error', err => {
        log.bundleError(outFilename, err);
        return reject(err);
      })
      .on('end', () => {
        log.bundleSuccess(outFilename, startTime);
        // return resolve();
      })
      .pipe(writeStream);

    writeStream.on('finish', () => {
      return resolve();
      /*
      if (callback)
        callback();
      */
    });
  });
}

/**
 * Uglify the `inFilename` into `outFilename`.
 */
module.exports.uglify = function(inFilename, outFilename) {
  var result = uglify.minify(inFilename);
  var startTime = new Date().getTime();


  fse.outputFile(outFilename, result.code, function(err) {
    if (err)
      return console.error(err.message);

    log.uglifySuccess(inFilename, outFilename, startTime);
  });
}
